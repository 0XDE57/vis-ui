apply plugin: 'java'
apply plugin: 'maven'
apply from: '../deploy.gradle'

group = 'com.kotcrab.vis'
archivesBaseName = "vis-editor"
sourceCompatibility = 1.8
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

eclipse.project {
    name = appName + "-editor"
}

jar {
    manifest {
        attributes(
                "Build-Timestamp": buildTimestamp,
                "Class-Path": configurations.runtime.files.collect { "lib/" + it.name }.join(' '),
                "Build-Jdk": JavaVersion.current(),
                "Main-Class": mainClassName,
        )
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            pom.project {
                name 'vis-editor'
                artifactId 'vis-editor'
                packaging 'jar'
                description 'Scene Editor for LibGDX'
            }
        }
    }
}

task copyExtJars(dependsOn: [':plugins:vis-editor-spine:jar', ':plugins:vis-editor-spine-notifier:jar']) {
    def spine = project(':plugins:vis-editor-spine')
    def spineRuntime = project(':plugins:vis-runtime-spine')
    def spineNotifier = project(':plugins:vis-editor-spine-notifier')

    doLast {
        copy {
            from spine.jar
            into sourceSets.main.output.classesDir.path + '/plugins/spine'
        }

        copy {
            from spineRuntime.jar
            into sourceSets.main.output.classesDir.path + '/plugins/spine/lib'
        }

        copy {
            from spineNotifier.jar
            into sourceSets.main.output.classesDir.path + '/plugins/spine-notifier'
        }
    }
}

task copyTools(dependsOn: [':tools:crash-reporter:jar']) {
    def reporter = project(':tools:crash-reporter')

    doLast {
        copy {
            from reporter.jar
            rename("(.*).jar", "crash-reporter.jar")
            into sourceSets.main.output.classesDir.path + '/tools/'
        }
    }
}

//task run(dependsOn: [copyExtJars, copyTools], type: JavaExec) {
task run(dependsOn: [copyExtJars], type: JavaExec) {
    main = mainClassName
    classpath = sourceSets.main.runtimeClasspath
    ignoreExitValue = true
    jvmArgs "-Dfile.encoding=UTF-8"
    if (System.properties['os.name'].toLowerCase().contains('mac')) {
        jvmArgs "-XstartOnFirstThread"
    }
    if (project.hasProperty("runArgs")) {
        args = Eval.me(runArgs)
    }
}
